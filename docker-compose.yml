version: '3.8'

services:
  api-server:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./config.yml:/app/config.yml:ro
    env_file:
      - .env
    environment:
      - USER_ID=${USER_ID:-100001}
      - GROUP_ID=${GROUP_ID:-100001}
      - TZ=${TZ:-Europe/Moscow}
    healthcheck:
      test: ["CMD", "python", "-c", "import psutil; health = True; health = health and psutil.cpu_percent(interval=1) < 95; health = health and psutil.virtual_memory().percent < 95; health = health and psutil.disk_usage('/').percent < 95; health = health and len(psutil.Process().open_files()) < 1000; print('OK' if health else 'FAIL')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - db

  db:
    image: postgres:14-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-fakedetector}
      - POSTGRES_USER=${DB_USER:-fakedetector}
      - POSTGRES_DB=${DB_NAME:-fakedetector}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-fakedetector}"]
      interval: 10s
      timeout: 5s
      retries: 5

  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    restart: always
    volumes:
      - ./config.yml:/app/config.yml:ro
    env_file:
      - .env
    environment:
      - USER_ID=${USER_ID:-100001}
      - GROUP_ID=${GROUP_ID:-100001}
      - TZ=${TZ:-Europe/Moscow}
    command: ["python", "bot.py"]
    depends_on:
      - api-server

volumes:
  postgres_data:

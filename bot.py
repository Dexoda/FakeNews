import logging
import os
import sys
import yaml
import aiohttp
import io
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# Configure logging
logging.basicConfig(
    level=os.environ.get("LOG_LEVEL", "INFO"),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# Load configuration
def load_config():
    try:
        with open("config.yml", "r") as config_file:
            config = yaml.safe_load(config_file)
            logger.info("Configuration loaded successfully")
            return config
    except Exception as e:
        logger.error(f"Error loading configuration: {e}")
        sys.exit(1)

# API client
class APIClient:
    def __init__(self, api_url):
        self.api_url = api_url
        self.session = None

    async def ensure_session(self):
        if self.session is None:
            self.session = aiohttp.ClientSession()

    async def close(self):
        if self.session:
            await self.session.close()
            self.session = None

    async def analyze_news(self, text, url=None):
        await self.ensure_session()
        data = {"text": text}
        if url:
            data["url"] = url

        async with self.session.post(f"{self.api_url}/analyze", json=data) as response:
            if response.status == 200:
                return await response.json()
            else:
                error_text = await response.text()
                logger.error(f"API error: {error_text}")
                raise Exception(f"API returned error: {response.status}")

# Bot command handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /start is issued."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FakeNewsDetector –±–æ—Ç.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a message when the command /help is issued."""
    await update.message.reply_text(
        "üîç *FakeNewsDetector* - –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n"
        "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏\n"
        "2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "*–û —Å–∏—Å—Ç–µ–º–µ:*\n"
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.",
        parse_mode="Markdown"
    )

async def analyze_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Analyze the news text sent by the user."""
    message = update.message.text

    # Check if it's a URL
    url = None
    if message.startswith(("http://", "https://")):
        url = message
        progress_message = await update.message.reply_text(
            "üîç –ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑..."
        )
    else:
        progress_message = await update.message.reply_text(
            "üîç –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑..."
        )

    try:
        # Show typing indicator
        await update.message.chat.send_action("typing")

        # Update progress
        await progress_message.edit_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç... (1/4)")

        # Send request to API
        api_client = context.bot_data["api_client"]
        if url:
            # For URLs, we'd extract text and then analyze
            # This is simplified here
            analysis_result = await api_client.analyze_news("", url)
        else:
            analysis_result = await api_client.analyze_news(message)

        # Update progress
        await progress_message.edit_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–∫—Ç—ã... (2/4)")
        await asyncio.sleep(1)  # Simulate processing time

        await progress_message.edit_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç... (3/4)")
        await asyncio.sleep(1)  # Simulate processing time

        await progress_message.edit_text("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é... (4/4)")
        await asyncio.sleep(1)  # Simulate processing time

        # Generate visualization from the results
        # This would be implemented in the real system
        score = analysis_result.get("credibility_score", 0.5)

        # Format the results
        result_message = format_analysis_results(analysis_result)

        # Create keyboard for detailed results
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", callback_data="stats"),
                InlineKeyboardButton("üî§ –õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", callback_data="ling")
            ],
            [
                InlineKeyboardButton("üí° –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", callback_data="sem"),
                InlineKeyboardButton("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="struct")
            ],
            [
                InlineKeyboardButton("‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã", callback_data="suspicious")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Store analysis results in context for callback queries
        if not "user_data" in context.user_data:
            context.user_data["user_data"] = {}
        context.user_data["user_data"]["last_analysis"] = analysis_result

        # Delete progress message and send results
        await progress_message.delete()
        await update.message.reply_text(result_message, reply_markup=reply_markup)

        # Send visualization if available
        # In a real system, this would be a chart generated from analysis_result
        # await update.message.reply_photo(open("temp_visualization.png", "rb"))

    except Exception as e:
        logger.error(f"Error analyzing text: {e}")
        await progress_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç."
        )

def format_analysis_results(analysis_result):
    """Format the analysis results for Telegram message"""
    score = analysis_result.get("credibility_score", 0.5)

    # Determine credibility level based on score
    if score >= 0.8:
        credibility = "‚úÖ –í—ã—Å–æ–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å"
    elif score >= 0.6:
        credibility = "üü° –°—Ä–µ–¥–Ω—è—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å"
    elif score >= 0.4:
        credibility = "‚ö†Ô∏è –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å"
    else:
        credibility = "‚ùå –ù–∏–∑–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å (–≤–µ—Ä–æ—è—Ç–Ω—ã–π —Ñ–µ–π–∫)"

    # Format message
    message = (
        f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:*\n\n"
        f"*–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏:* {credibility} ({score:.0%})\n\n"
        f"*–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:*\n"
        f"–¢–µ–∫—Å—Ç –±—ã–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. "
    )

    # Add specific findings if available
    suspicious_count = len(analysis_result.get("suspicious_fragments", []))
    if suspicious_count > 0:
        message += f"\n\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {suspicious_count} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤"

    message += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞."

    return message

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button presses from inline keyboards"""
    query = update.callback_query
    await query.answer()

    # Get stored analysis data
    if not "user_data" in context.user_data or "last_analysis" not in context.user_data["user_data"]:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑.")
        return

    analysis_result = context.user_data["user_data"]["last_analysis"]

    # Handle different button callbacks
    if query.data == "stats":
        stats_text = format_statistical_analysis(analysis_result)
        await query.edit_message_text(stats_text, reply_markup=query.message.reply_markup)
    elif query.data == "ling":
        ling_text = format_linguistic_analysis(analysis_result)
        await query.edit_message_text(ling_text, reply_markup=query.message.reply_markup)
    elif query.data == "sem":
        sem_text = format_semantic_analysis(analysis_result)
        await query.edit_message_text(sem_text, reply_markup=query.message.reply_markup)
    elif query.data == "struct":
        struct_text = format_structural_analysis(analysis_result)
        await query.edit_message_text(struct_text, reply_markup=query.message.reply_markup)
    elif query.data == "suspicious":
        suspicious_text = format_suspicious_fragments(analysis_result)
        await query.edit_message_text(suspicious_text, reply_markup=query.message.reply_markup)

def format_statistical_analysis(analysis_result):
    """Format statistical analysis results"""
    stats = analysis_result.get("statistical", {})
    return (
        "*–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:*\n\n"
        f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –∏ –º–Ω–µ–Ω–∏–π: {stats.get('fact_opinion_ratio', '–ù/–î')}\n"
        f"–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: {stats.get('readability_score', '–ù/–î')}\n"
        f"–ê–Ω–æ–º–∞–ª–∏–∏ –≤ —á–∞—Å—Ç–æ—Ç–µ —Å–ª–æ–≤: {stats.get('word_frequency_anomalies', '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')}\n\n"
        f"*–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:* {stats.get('credibility_score', 0.5):.0%}"
    )

def format_linguistic_analysis(analysis_result):
    """Format linguistic analysis results"""
    ling = analysis_result.get("linguistic", {})
    return (
        "*–õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:*\n\n"
        f"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: {ling.get('sentiment', '–ù/–î')}\n"
        f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞: {ling.get('emotional_tone', '–ù/–î')}\n"
        f"–ú–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {ling.get('manipulative_constructs_count', 0)}\n\n"
        f"*–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –ø–æ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:* {ling.get('credibility_score', 0.5):.0%}"
    )

def format_semantic_analysis(analysis_result):
    """Format semantic analysis results"""
    sem = analysis_result.get("semantic", {})
    return (
        "*–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:*\n\n"
        f"–°–º—ã—Å–ª–æ–≤—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è: {sem.get('contradictions_count', 0)}\n"
        f"–°–≤—è–∑–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: {sem.get('coherence_score', '–ù/–î')}\n"
        f"–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(sem.get('key_themes', ['–ù/–î']))}\n\n"
        f"*–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:* {sem.get('credibility_score', 0.5):.0%}"
    )

def format_structural_analysis(analysis_result):
    """Format structural analysis results"""
    struct = analysis_result.get("structural", {})
    return (
        "*–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑:*\n\n"
        f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º: {struct.get('journalism_standards_score', '–ù/–î')}\n"
        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ—Å—Ç–∏: {struct.get('structure_quality', '–ù/–î')}\n"
        f"–ù–∞—Ä—É—à–µ–Ω–∏—è –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {struct.get('structure_violations', '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')}\n\n"
        f"*–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:* {struct.get('credibility_score', 0.5):.0%}"
    )

def format_suspicious_fragments(analysis_result):
    """Format suspicious fragments"""
    fragments = analysis_result.get("suspicious_fragments", [])
    if not fragments:
        return "*–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:*\n\n–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."

    message = "*–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:*\n\n"
    for i, fragment in enumerate(fragments[:5]):  # Limit to 5 fragments
        message += f"{i+1}. ¬´{fragment['text']}¬ª\n"
        message += f"   –ü—Ä–∏—á–∏–Ω–∞: {fragment['reason']}\n"
        message += f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {fragment['confidence']:.0%}\n\n"

    if len(fragments) > 5:
        message += f"–ò –µ—â–µ {len(fragments) - 5} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤..."

    return message

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Log errors caused by updates."""
    logger.error(f"Update {update} caused error {context.error}")

async def shutdown(application):
    """Shut down the bot gracefully"""
    logger.info("Shutting down bot...")
    if "api_client" in application.bot_data:
        await application.bot_data["api_client"].close()

def main():
    """Start the bot."""
    # Load configuration
    config = load_config()

    # Create API client
    api_url = config.get("api", {}).get("url", "http://api-server:8000")
    api_client = APIClient(api_url)

    # Get bot token from environment
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN not set in environment")
        sys.exit(1)

    # Create application and add handlers
    application = Application.builder().token(token).build()
    application.bot_data["api_client"] = api_client

    # Add command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # Add message handler
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_text))

    # Add callback query handler
    application.add_handler(CallbackQueryHandler(button_handler))

    # Add error handler
    application.add_error_handler(error_handler)

    # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É:
    # application.add_shutdown_callback(shutdown)

    # Start the Bot
    logger.info("Starting bot polling...")
    application.run_polling()

if __name__ == "__main__":
    logger.info("Starting Telegram bot")
    main()
